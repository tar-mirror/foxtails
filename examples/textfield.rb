#!/usr/bin/env ruby

require 'foxtails'

include Fox
include FoxTails

class MainWindow < FXMainWindow
  observable :text_field_content
    # This defines a writer method that notifies interested
    # parties of any changes.
  
  def initialize(*args)
    super
    
    mb = FXMenuBar.new(self, LAYOUT_SIDE_TOP|LAYOUT_FILL_X)

    file_menu = FXMenuPane.new(self)
    FXMenuTitle.new(mb, "&File", nil, file_menu)
    
    FXMenuCommand.new(file_menu, "&Quit\tCtl-Q\tQuit the application.").
      connect(SEL_COMMAND) { getApp().exit }

    field = FTTextField.new(self, 60, self, :text_field_content)
      # The third argument specifies which object will receive the
      # :text_field_content= message (the "target"). The fourth argument
      # specifies the message itself. The argument will be the string
      # typed into the field. Note that the prototype for FTTextField
      # differs from that of FXTextField only in that the target and the
      # message name replace the tgt,sel arguments, so it's easy to
      # translate from Fox calls.
    
    self.text_field_content = "Initial text"
      # Assigning to this attribute causes the GUI to be updated.
    
    field.dynamic = true
      # Use this if you want #text_field_content= to be called whenever
      # a key is pressed in the field. Otherwise it will only be called
      # when you tab out etc.
  end
  
# If you define your own setter method (rather than use the method
# generated by the observable declaration) you can control what effect
# editing the field has.
#
#  def text_field_content= val
#    p val
#    @text_field_content = val
#  end
  
  def create
    super
    show
  end
end

class App < FTApp
  def initialize
    super("FieldTest", "TEST")
    MainWindow.new(self, "FieldTest")
  end
end

App.new.run
